P3MusicDB ----------------------------------
package p3musicdb;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

public class P3MusicDB {
    static ResultSet artist = null;
    static ResultSet songs = null;
    static ResultSet user = null;
    static ResultSet playlist=null;
    static ResultSet album=null;
    static ResultSet follower=null;
    static Connection myConn = null;
    static WhoAreYou whoAreYou = new WhoAreYou();
    static void getConnect() {
        try {
            myConn=  DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/proje_3","root","21148953362");
        } catch (SQLException ex) {
            Logger.getLogger(P3MusicDB.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   
    public static ResultSet returnArtist(){
        try {
            
            getConnect();
            Statement myStat=myConn.createStatement();
            artist=myStat.executeQuery("select * from artist");

        }catch (Exception e){
            e.printStackTrace();
        }
        return artist;
    }
   
    public static ResultSet returnSongs(){
        try {

            getConnect();
            Statement myStat=myConn.createStatement();
            songs=myStat.executeQuery("select * from songs");

        }catch (Exception e){
            e.printStackTrace();
        }
        return songs;
    }
    
    public static ResultSet returnUser(){
        try {
            getConnect();
            Statement myStat=myConn.createStatement();
            user=myStat.executeQuery("select * from user ");

        }catch (Exception e){
            e.printStackTrace();
        }
        return user;
    }
        public static ResultSet returnPlaylist(){
        try {
            getConnect();
            Statement myStat=myConn.createStatement();
            playlist=myStat.executeQuery("select * from playlist ");

        }catch (Exception e){
            e.printStackTrace();
        }
        return playlist;
    }
        public static ResultSet returnFollower(){
        try {
            getConnect();
            Statement myStat=myConn.createStatement();
            follower=myStat.executeQuery("select * from follower ");

        }catch (Exception e){
            e.printStackTrace();
        }
        return follower;
    }
        public static ResultSet returnAlbum(){
        try {
            getConnect();
            Statement myStat=myConn.createStatement();
            album=myStat.executeQuery("select * from album ");

        }catch (Exception e){
            e.printStackTrace();
        }
        return album;
    }
        public static ResultSet returnQuarryArtist(String q){
        try {
            
            getConnect();
            Statement myStat=myConn.createStatement();
            artist=myStat.executeQuery(q);

        }catch (Exception e){
            e.printStackTrace();
        }
        return artist;
    }
    public static ResultSet returnQuarryPlaylist(String q){
        try {
            
            getConnect();
            Statement myStat=myConn.createStatement();
            playlist=myStat.executeQuery(q);

        }catch (Exception e){
            e.printStackTrace();
        }
        return playlist;
    }
   
    public static ResultSet returnQuarrySongs(String q){
        try {

            getConnect();
            Statement myStat2=myConn.createStatement();
            songs=myStat2.executeQuery(q);

        }catch (Exception e){
            e.printStackTrace();
        }
        return songs;
    }
    
    public static ResultSet returnQuarryUser(String q){
        try {
            getConnect();
            Statement myStat3=myConn.createStatement();
            user=myStat3.executeQuery(q);

        }catch (Exception e){
            e.printStackTrace();
        }
        return user;
    }
    public static ResultSet returnQuarryFollower(String q){
        try {
            
            getConnect();
            Statement myStat=myConn.createStatement();
            follower=myStat.executeQuery(q);

        }catch (Exception e){
            e.printStackTrace();
        }
        return follower;
    }
    public static ResultSet returnQuarryAlbum(String q){
        try {
            
            getConnect();
            Statement myStat=myConn.createStatement();
            album=myStat.executeQuery(q);

        }catch (Exception e){
            e.printStackTrace();
        }
        return album;
    }
    public static void main(String[] args) {
        getConnect();
        whoAreYou.setVisible(true);
    }
    
}
WhoAreYou -------------------------------------------
package p3musicdb;
public class WhoAreYou extends javax.swing.JFrame {
    LoggingInterface loggingInterface =new LoggingInterface();
    adminGet adminGet = new adminGet();
    public WhoAreYou() {
        initComponents();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1100, 600));
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        jButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/adminIcon.png"))); // NOI18N
        jButton.setBorderPainted(false);
        jButton.setContentAreaFilled(false);
        jButton.setFocusPainted(false);
        jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActionPerformed(evt);
            }
        });
        jPanel1.add(jButton);
        jButton.setBounds(70, 70, 270, 280);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/userIcon.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(750, 70, 270, 280);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/whoareyouBG.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 1100, 600);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(-2, 0, 1100, 600);

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        loggingInterface.setVisible(true);
        this.setVisible(false);
        
    }                                        

    private void jButtonActionPerformed(java.awt.event.ActionEvent evt) {                                        
        adminGet.setVisible(true);
    }                                       

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WhoAreYou.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WhoAreYou.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WhoAreYou.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WhoAreYou.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WhoAreYou().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration                   
}

AdminInterface ---------------------------------------------------------------------------------
package p3musicdb;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class AdminInterface extends javax.swing.JFrame {

    static ResultSet artist = null;
    static ResultSet songs = null;
    static ResultSet user = null;
    static ResultSet playlist = null;
    Object[] artistRows = new Object[3];
    Object[] songsRows = new Object[8];
    String[] userRows = new String[7];
    Object[] playlistRows = new Object[4];
    static ResultSet album = null;
    Object[] albumRows = new Object[2];
    ArrayList<String> headsets;
    String comboModelNames;
    int i;
    DefaultTableModel model = new DefaultTableModel(10, 2);
    DefaultComboBoxModel comboModel = new DefaultComboBoxModel<>();
    String insertInfo;
    static int control;

    public AdminInterface() {
        initComponents();
        listPlaylist.setEnabled(false);
        deleteButton.setEnabled(false);
        listalbumsButton.setEnabled(false);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        artistButton = new javax.swing.JButton();
        listalbumsButton = new javax.swing.JButton();
        songsButton = new javax.swing.JButton();
        userButton = new javax.swing.JButton();
        listPlaylist = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(1100, 600));
        setSize(new java.awt.Dimension(1110, 635));
        getContentPane().setLayout(null);

        jPanel1.setMinimumSize(new java.awt.Dimension(1110, 635));
        jPanel1.setPreferredSize(new java.awt.Dimension(1110, 635));
        jPanel1.setVerifyInputWhenFocusTarget(false);
        jPanel1.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.setMinimumSize(new java.awt.Dimension(300, 64));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(40, 40, 710, 330);
        jPanel1.add(jTextField1);
        jTextField1.setBounds(860, 70, 200, 30);
        jPanel1.add(jTextField2);
        jTextField2.setBounds(860, 100, 200, 30);
        jPanel1.add(jTextField3);
        jTextField3.setBounds(860, 130, 200, 30);
        jPanel1.add(jTextField4);
        jTextField4.setBounds(860, 160, 200, 30);
        jPanel1.add(jTextField5);
        jTextField5.setBounds(860, 190, 200, 30);
        jPanel1.add(jTextField6);
        jTextField6.setBounds(860, 220, 200, 30);
        jPanel1.add(jTextField7);
        jTextField7.setBounds(860, 250, 200, 30);
        jPanel1.add(jTextField8);
        jTextField8.setBounds(860, 280, 200, 30);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton);
        addButton.setBounds(880, 350, 70, 25);

        artistButton.setText("List the Artist");
        artistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artistButtonActionPerformed(evt);
            }
        });
        jPanel1.add(artistButton);
        artistButton.setBounds(40, 410, 110, 40);

        listalbumsButton.setText("List Albums");
        listalbumsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listalbumsButtonActionPerformed(evt);
            }
        });
        jPanel1.add(listalbumsButton);
        listalbumsButton.setBounds(480, 410, 110, 40);

        songsButton.setText("List the Songs");
        songsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songsButtonActionPerformed(evt);
            }
        });
        jPanel1.add(songsButton);
        songsButton.setBounds(180, 410, 120, 40);

        userButton.setText("List the Users");
        userButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userButtonActionPerformed(evt);
            }
        });
        jPanel1.add(userButton);
        userButton.setBounds(330, 410, 120, 40);

        listPlaylist.setText("List the Playlists");
        listPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPlaylistActionPerformed(evt);
            }
        });
        jPanel1.add(listPlaylist);
        listPlaylist.setBounds(170, 480, 130, 25);

        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("1.sütun");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(800, 70, 50, 30);

        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("2.sütun");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(800, 100, 50, 30);

        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("3.sütun");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(800, 130, 50, 30);

        jLabel4.setBackground(new java.awt.Color(51, 51, 51));
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("4.sütun");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(800, 160, 50, 30);

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("5.sütun");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(800, 190, 50, 30);

        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("6.sütun");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(800, 220, 50, 30);

        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("7.sütun");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(800, 250, 50, 30);

        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("8.sütun");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(800, 280, 50, 30);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteButton);
        deleteButton.setBounds(650, 410, 64, 25);

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(updateButton);
        updateButton.setBounds(970, 350, 70, 25);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/panelBG.jpg"))); // NOI18N
        jPanel1.add(background);
        background.setBounds(0, 0, 1100, 600);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1100, 600);

        pack();
    }// </editor-fold>                        

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (control == 1) {
            insertInfo = "INSERT INTO artist(artist_ID,artist_name,artist_country) VALUES (" + "'" + LoggingInterface.asciiConverter(jTextField2.getText()) + "'," + "'" + jTextField2.getText() + "'," + "'" + jTextField3.getText() + "')";
        } else if (control == 2) {
            insertInfo = "INSERT INTO songs(song_ID,song_name,date,artist,album,type,views,duration) VALUES (" + "'" + jTextField2.getText() + "'," + "'" + jTextField3.getText() + "'," + "'" + jTextField4.getText() + "'," + "'" + jTextField5.getText() + "'," + "'" + jTextField6.getText() + "'," + "'" + jTextField7.getText() + "'," + "'" + jTextField8.getText() + "')";
        } else if (control == 3) {
            insertInfo = "INSERT INTO user(user_ID,user_name,email,password,subscription_type,country,payment_info) VALUES (" + "'" + LoggingInterface.asciiConverter(jTextField2.getText()) + "'," + "'" + jTextField2.getText() + "'," + "'" + jTextField3.getText() + "'," + "'" + jTextField4.getText() + "'," + "'" + jTextField5.getText() + "'," + "'" + jTextField6.getText() + "'" + jTextField7.getText() + "')";
        }
        calculateInfo(insertInfo, evt);
    }                                         

    private void artistButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        model.setColumnCount(3);
        listPlaylist.setEnabled(false);
        control = 1;
        listalbumsButton.setEnabled(false);
        deleteButton.setEnabled(false);
        jTextField1.setVisible(true);
        jLabel1.setVisible(true);
        jTextField2.setVisible(true);
        jLabel2.setVisible(true);
        jTextField3.setVisible(true);
        jLabel3.setVisible(true);
        jTextField4.setVisible(false);
        jLabel4.setVisible(false);
        jTextField5.setVisible(false);
        jLabel5.setVisible(false);
        jTextField6.setVisible(false);
        jLabel6.setVisible(false);
        jTextField7.setVisible(false);
        jLabel7.setVisible(false);
        jTextField8.setVisible(false);
        jLabel8.setVisible(false);
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");

        if (isQuery) {
            artist = P3MusicDB.returnQuarryArtist(insertInfo);
        } else {
            artist = P3MusicDB.returnArtist();
        }

        model.setRowCount(0);
        print(artist, 1);
        jTable1.setModel(model);
    }                                            

    private void songsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        control = 2;
        model.setColumnCount(8);
        listalbumsButton.setEnabled(false);
        deleteButton.setEnabled(false);
        jTextField1.setVisible(true);
        jLabel1.setVisible(true);
        jTextField2.setVisible(true);
        jLabel2.setVisible(true);
        jTextField3.setVisible(true);
        jLabel3.setVisible(true);
        jTextField4.setVisible(true);
        jLabel4.setVisible(true);
        jTextField5.setVisible(true);
        jLabel5.setVisible(true);
        jTextField6.setVisible(true);
        jLabel6.setVisible(true);
        jTextField7.setVisible(true);
        jLabel7.setVisible(true);
        jTextField8.setVisible(true);
        jLabel8.setVisible(true);
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");

        if (isQuery) {
            songs = P3MusicDB.returnQuarrySongs(insertInfo);
        } else {
            songs = P3MusicDB.returnSongs();
        }
        model.setRowCount(0);
        print(songs, 2);
        jTable1.setModel(model);
        listPlaylist.setEnabled(false);
    }                                           

    private void userButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        model.setColumnCount(7);
        listPlaylist.setEnabled(false);
        listalbumsButton.setEnabled(false);
        deleteButton.setEnabled(false);
        control = 3;
        jTextField1.setVisible(true);
        jLabel1.setVisible(true);
        jTextField2.setVisible(true);
        jLabel2.setVisible(true);
        jTextField3.setVisible(true);
        jLabel3.setVisible(true);
        jTextField4.setVisible(true);
        jLabel4.setVisible(true);
        jTextField5.setVisible(true);
        jLabel5.setVisible(true);
        jTextField6.setVisible(true);
        jLabel6.setVisible(true);
        jTextField7.setVisible(true);
        jLabel7.setVisible(true);
        jTextField8.setVisible(false);
        jLabel8.setVisible(false);
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        if (isQuery) {
            user = P3MusicDB.returnQuarryUser(insertInfo);
        } else {
            insertInfo = "SELECT * FROM user WHERE subscription_type LIKE 'PREMIUM' or subscription_type LIKE 'NORMAL'";
            user = P3MusicDB.returnQuarryUser(insertInfo);
        }
        model.setRowCount(0);
        print(user, 3);
        jTable1.setModel(model);
    }                                          

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        listalbumsButton.setEnabled(false);
        int[] nums = jTable1.getSelectedRows();
        String insertInfo2;
        for (int i = 0; i < nums.length; i++) {
            String cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
            String cell2 = jTable1.getModel().getValueAt(nums[i], 1).toString();
            System.out.println(nums[i] + "-------" + cell);
            if (control == 1) {
                insertInfo = "DELETE FROM artist WHERE (artist_ID=" + Integer.valueOf(cell) + ")";
                insertInfo2 = "DELETE FROM songs WHERE artist IN(SELECT artist_name FROM artist WHERE artist_ID =" + Integer.valueOf(cell) + ")";
                calculateInfo(insertInfo2, evt);
                insertInfo2 = "DELETE FROM album WHERE artist IN(SELECT artist_name FROM artist WHERE artist_ID =" + Integer.valueOf(cell) + ")";
                calculateInfo(insertInfo2, evt);
                insertInfo2 = "DELETE from playlist where song_ID IN(select song_ID from songs where artist IN (select artist_name from artist where artist_ID =" + Integer.valueOf(cell) + "))";
                calculateInfo(insertInfo2, evt);
            } else if (control == 2) {
                insertInfo = "DELETE FROM songs WHERE (song_ID=" + Integer.valueOf(cell) + ")";
                insertInfo2 = "DELETE FROM playlist WHERE (song_ID=" + Integer.valueOf(cell) + ")";
                calculateInfo(insertInfo2, evt);
                insertInfo2 = "DELETE FROM album WHERE (song_ID=" + Integer.valueOf(cell) + ")";
                calculateInfo(insertInfo2, evt);
            } else if (control == 3) {
                insertInfo = "DELETE FROM user WHERE (user_ID=" + Integer.valueOf(cell) + ")";
                insertInfo2 = "DELETE FROM playlist WHERE (user_ID=" + Integer.valueOf(cell) + ")";
                calculateInfo(insertInfo2, evt);
            } else if (control == 4) {
                isQuery=false;
                insertInfo = "DELETE FROM album WHERE (artist=(Select artist_name from artist where artist_ID="+chosenID+") and album_name ='"+cell2+"')";
                insertInfo2 = "DELETE FROM playlist WHERE song_ID IN(select song_ID from songs where song_ID IN (select song_ID from songs where  (artist='" + cell + "' and album = '"+cell2+"')))";
                calculateInfo(insertInfo2, evt);
                insertInfo2 = "DELETE FROM songs WHERE (artist='" + cell + "' and album = '"+cell2+"')";
                calculateInfo(insertInfo2, evt);
            }
            calculateInfo(insertInfo, evt);
        }
    }                                            
    boolean isQuery;
    int chosenID;
    private void listPlaylistActionPerformed(java.awt.event.ActionEvent evt) {                                             
listalbumsButton.setEnabled(false);

        if (i == 0) {
            System.out.println("i=0");
            
            isQuery = true;
            chosenID = Integer.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString());
            insertInfo = "SELECT Distinct playlist_name FROM proje_3.playlist where user_ID=" + chosenID;
            model.setColumnCount(1);
            playlistperform(insertInfo);
            control=100;
            i++;
        } else if (i == 1) {
            System.out.println("i=1");
            int[] nums = jTable1.getSelectedRows();
            for (int i = 0; i < nums.length; i++) {
                
                String cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
                System.out.println(nums[i] + " ------- " + cell);
                if (cell.equalsIgnoreCase("Pop")) {
                    insertInfo = "SELECT * FROM proje_3.songs WHERE song_ID IN (SELECT song_ID FROM proje_3.playlist where user_ID = " + chosenID + " and playlist_name LIKE 'Pop')";
                } else if (cell.equalsIgnoreCase("Jazz")) {
                    insertInfo = "SELECT * FROM proje_3.songs where song_ID IN (SELECT song_ID FROM proje_3.playlist where user_ID=" + chosenID + " and playlist_name LIKE 'Jazz')";
                } else if (cell.equalsIgnoreCase("Classic")) {
                    insertInfo = "SELECT * FROM proje_3.songs where song_ID IN (SELECT song_ID FROM proje_3.playlist where user_ID=" + chosenID + " and playlist_name LIKE 'Classic')";
                }
                model.setColumnCount(8);
                isQuery = true;
                songsButtonActionPerformed(evt);
                isQuery = false;

            }
            i = 0;
        }
    }                                            
String[] selecteds = new String[8];
String[] entries = new String[8];
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        if(control==3){
            listPlaylist.setEnabled(true);
        }
        if(control==1){
            listalbumsButton.setEnabled(true);
        }
        deleteButton.setEnabled(true);
        jTextField1.setEditable(false);
        int row = jTable1.getSelectedRow();
        String selection = jTable1.getModel().getValueAt(row, 0).toString();
        
        if (control == 1) {
            insertInfo = "select * from artist where artist_ID = " + selection;
            artist = P3MusicDB.returnQuarryArtist(insertInfo);
            try {
                if (artist.next()) {
                    jTextField1.setText(artist.getString("artist_ID"));
                    jTextField2.setText(artist.getString("artist_name"));
                    jTextField3.setText(artist.getString("artist_country"));
                }
                selecteds[0]=jTable1.getModel().getValueAt(row, 0).toString();
                    selecteds[1]=jTable1.getModel().getValueAt(row, 1).toString();
                    selecteds[2]=jTable1.getModel().getValueAt(row, 2).toString();
            } catch (SQLException ex) {
                Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (control == 2) {
            insertInfo = "select * from songs where song_ID = " + selection;
            songs = P3MusicDB.returnQuarrySongs(insertInfo);
            try {
                if (songs.next()) {
                    jTextField1.setText(songs.getString("song_ID"));
                    jTextField2.setText(songs.getString("song_name"));
                    jTextField3.setText(songs.getString("date"));
                    jTextField4.setText(songs.getString("artist"));
                    jTextField5.setText(songs.getString("album"));
                    jTextField6.setText(songs.getString("type"));
                    jTextField7.setText(songs.getString("views"));
                    jTextField8.setText(songs.getString("duration"));
                }
                selecteds[0]=jTable1.getModel().getValueAt(row, 0).toString();
                    selecteds[1]=jTable1.getModel().getValueAt(row, 1).toString();
                    selecteds[2]=jTable1.getModel().getValueAt(row, 2).toString();
                    selecteds[3]=jTable1.getModel().getValueAt(row, 3).toString();
                    selecteds[4]=jTable1.getModel().getValueAt(row, 4).toString();
                    selecteds[5]=jTable1.getModel().getValueAt(row, 5).toString();
                    selecteds[6]=jTable1.getModel().getValueAt(row, 6).toString();
                    selecteds[7]=jTable1.getModel().getValueAt(row, 7).toString();
            } catch (SQLException ex) {
                Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (control == 3) {
            insertInfo = "select * from user where user_ID = " + selection;
            user = P3MusicDB.returnQuarryUser(insertInfo);
            try {
                if (user.next()) {
                    jTextField1.setText(user.getString("user_ID"));
                    jTextField2.setText(user.getString("user_name"));
                    jTextField3.setText(user.getString("email"));
                    jTextField4.setText(user.getString("password"));
                    jTextField5.setText(user.getString("subscription_type"));
                    jTextField6.setText(user.getString("country"));
                    jTextField7.setText(user.getString("payment_info"));
                }
                selecteds[0]=jTable1.getModel().getValueAt(row, 0).toString();
                    selecteds[1]=jTable1.getModel().getValueAt(row, 1).toString();
                    selecteds[2]=jTable1.getModel().getValueAt(row, 2).toString();
                    selecteds[3]=jTable1.getModel().getValueAt(row, 3).toString();
                    selecteds[4]=jTable1.getModel().getValueAt(row, 4).toString();
                    selecteds[5]=jTable1.getModel().getValueAt(row, 5).toString();
                    selecteds[6]=jTable1.getModel().getValueAt(row, 6).toString();
            } catch (SQLException ex) {
                Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }                                    

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        String insertInfo2;
        entries[0]=jTextField1.getText();
        entries[1]=jTextField2.getText();
        entries[2]=jTextField3.getText();
        entries[3]=jTextField4.getText();
        entries[4]=jTextField5.getText();
        entries[5]=jTextField6.getText();
        entries[6]=jTextField7.getText();
        entries[7]=jTextField8.getText();
        if (control == 1) {

            insertInfo = "Update artist set artist_name='" + entries[1] + "',artist_country='" + entries[2] + "' where artist_ID=" + Integer.valueOf(entries[0]);
            insertInfo2 = "Update songs set artist='" + entries[1] + "' where artist IN (select artist_name from artist where artist_ID=" + Integer.valueOf(entries[0]) + ")";
            calculateInfo(insertInfo2, evt);
            insertInfo2 = "Update album set artist='" + entries[1] + "' where artist IN (select artist_name from artist where artist_ID=" + Integer.valueOf(entries[0]) + ")";
            calculateInfo(insertInfo2, evt);
        } else if (control == 2) {
                    
            insertInfo = "Update songs set song_name='" + entries[1] + "',date='" + entries[2] + "',artist='" + entries[3] + "',album='" + entries[4] + "',type='" + entries[5] + "',views=" + entries[6] + ",duration='" + entries[7] + "' where song_ID=" + Integer.valueOf(entries[0]);
            insertInfo2 = "Update artist set artist_name='" + entries[3] + "' where artist_name IN(Select artist from songs where song_ID=" + Integer.valueOf(entries[0]) + ")";
            calculateInfo(insertInfo2, evt);
            insertInfo2 = "Update album set artist='" + entries[3] +"',album_name='" + entries[4] + "',album_type='" + entries[5] + "' where album_name LIKE (select album from songs where song_ID='" + entries[0] + "')";
            calculateInfo(insertInfo2, evt);
            insertInfo2 = "Update songs set album='" + entries[4] + "' where song_ID IN(Select song_ID from album where (album_name='" + selecteds[4] + "' and artist LIKE '" + selecteds[3] +"'))";
            calculateInfo(insertInfo2, evt);
        } else if (control == 3) {
            insertInfo = "Update user set  user_name='" + entries[1] + "',email='" + entries[2] + "',password='" + entries[3] + "',subscription_type='" + entries[4] + "',country='" + entries[5] + "',payment_info='" + entries[6] + "' where user_ID=" + Integer.valueOf(entries[0]);
        }
        calculateInfo(insertInfo, evt);
        jTextField1.setEditable(true);
    }                                            

    private void listalbumsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if (i == 0) {
            isQuery = true;
            control=4;
            chosenID = Integer.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString());
            insertInfo = "SELECT Distinct album_type FROM album";
            model.setColumnCount(1);
            album = P3MusicDB.returnQuarryAlbum(insertInfo);
            model.setRowCount(0);

            try {
                while (album.next()) {
                    albumRows[0] = album.getString("album_type");
                    model.addRow(albumRows);
                }
                 jTable1.setModel(model);
                headsets = getHeaders(album);
                for (int j = 0; j < headsets.size(); j++) {
                    ChangeName(jTable1, j, headsets.get(j));
                }
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
            isQuery = false;
            i++;

        } else if (i == 1) {

            int[] nums = jTable1.getSelectedRows();
            model.setColumnCount(2);
            for (int i = 0; i < nums.length; i++) {
                String cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
                System.out.println(nums[i] + " ------- " + cell);
                if (cell.equalsIgnoreCase("Pop")) {
                    insertInfo = "select distinct artist,album_name from album where artist IN(select artist_name from artist where artist_ID = "+ chosenID +" and album_type LIKE 'Pop')";
                } else if (cell.equalsIgnoreCase("Jazz")) {
                    insertInfo = "select distinct artist,album_name from album where artist IN(select artist_name from artist where artist_ID = "+ chosenID +" and album_type LIKE 'Jazz')";
                } else if (cell.equalsIgnoreCase("Classic")) {
                    insertInfo = "select distinct artist,album_name from album where artist IN(select artist_name from artist where artist_ID = "+ chosenID +" and album_type LIKE 'Classic')";
                }
                isQuery = true;
                if (isQuery) {
                    album = P3MusicDB.returnQuarryAlbum(insertInfo);
                } else {
                    album = P3MusicDB.returnAlbum();
                }
                
                model.setRowCount(0);
                print(album, 6);
                jTable1.setModel(model);
                isQuery = false;
                listalbumsButton.setEnabled(false);
                control = 4;
            }
            i = 0;
        }

    }                                                
    public void print(ResultSet rs, int table) {
        switch (table) {
            case 1:
                try {
                    while (rs.next()) {
                        artistRows[0] = rs.getString("artist_ID");
                        artistRows[1] = rs.getString("artist_name");
                        artistRows[2] = rs.getString("artist_country");
                        model.addRow(artistRows);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
                jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));}
                break;
            case 2:
                try {
                    while (rs.next()) {
                        songsRows[0] = rs.getString("song_ID");
                        songsRows[1] = rs.getString("song_name");
                        songsRows[2] = rs.getString("date");
                        songsRows[3] = rs.getString("artist");
                        songsRows[4] = rs.getString("album");
                        songsRows[5] = rs.getString("type");
                        songsRows[6] = rs.getString("views");
                        songsRows[7] = rs.getString("duration");
                        model.addRow(songsRows);
                    }
                    jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));}
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case 3:
                try {
                    while (rs.next()) {
                        userRows[0] = rs.getString("user_ID");
                        userRows[1] = rs.getString("user_name");
                        userRows[2] = rs.getString("email");
                        userRows[3] = rs.getString("password");
                        userRows[4] = rs.getString("subscription_type");
                        userRows[5] = rs.getString("country");
                        userRows[6] = rs.getString("payment_info");
                        model.addRow(userRows);
                    }
                    jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));}
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case 4:
                try {
                    while (rs.next()) {
                        if (i == 0) {
                            playlistRows[0] = rs.getString("playlist_name");
                        } else if (i == 1) {
                            playlistRows[0] = rs.getString("song_name");
                        }
                        model.addRow(playlistRows);
                    }
                    jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));}
                } catch (SQLException ex) {
                    Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
                case 6:
                try {
                    while (rs.next()) {
                            albumRows[0] = rs.getString("artist");
                            albumRows[1] = rs.getString("album_name");
                        model.addRow(albumRows);
                    }
                     jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
            default:
                break;
        }
    }

    public void playlistperform(String q) {
        if(isQuery){
            playlist = P3MusicDB.returnQuarryPlaylist(q);
        }else{
            playlist = P3MusicDB.returnPlaylist();
        }
        model.setRowCount(0);

        try {
            while (playlist.next()) {
                if (i == 0) {
                    playlistRows[0] = playlist.getString("playlist_name");
                } else if (i == 1) {
                    playlistRows[0] = playlist.getString("song_name");
                }
                model.addRow(playlistRows);
            }
            jTable1.setModel(model);
                headsets=getHeaders(playlist);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));}
        } catch (SQLException ex) {
            Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void calculateInfo(String getInsertInfo, java.awt.event.ActionEvent evt) {
        if (control == 1) {
            try {
                P3MusicDB.returnArtist().getStatement().executeUpdate(getInsertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
            artistButtonActionPerformed(evt);
        } else if (control == 2) {
            try {
                P3MusicDB.returnSongs().getStatement().executeUpdate(getInsertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
            songsButtonActionPerformed(evt);
        } else if (control == 3) {
            try {
                P3MusicDB.returnUser().getStatement().executeUpdate(getInsertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
            userButtonActionPerformed(evt);
        } else if (control == 4) {
            try {
                P3MusicDB.returnPlaylist().getStatement().executeUpdate(getInsertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
            playlistperform(getInsertInfo);
        }

    }

    public void ChangeName(JTable table, int col_index, String col_name) {
        table.getColumnModel().getColumn(col_index).setHeaderValue(col_name);
    }

    public ArrayList getHeaders(ResultSet rs) {
        ArrayList<String> headers = new ArrayList<String>();
        ResultSetMetaData rsmd;
        try {
            rsmd = rs.getMetaData();
            for (int j = 0; j < rsmd.getColumnCount(); j++) {
                headers.add(j, rsmd.getColumnName(j + 1));
            }

        } catch (SQLException ex) {
            Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
        }

        return headers;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton addButton;
    private javax.swing.JButton artistButton;
    private javax.swing.JLabel background;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JButton listPlaylist;
    private javax.swing.JButton listalbumsButton;
    private javax.swing.JButton songsButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton userButton;
    // End of variables declaration                   
}

LoggingInterface -----------------------------------------------------------------------------

package p3musicdb;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

public class LoggingInterface extends javax.swing.JFrame {
    static ResultSet user = null;
    static boolean isPremium = false;
    static int signedID;
    static String signedName;
    String insertInfo;
    DefaultTableModel model = new DefaultTableModel(10, 8);
    String subType="NORMAL";
    PremiumListingInterface premiumListingInterface = new PremiumListingInterface();
    NormalListingInterface normalListingInterface = new NormalListingInterface();
    AdminInterface adminInterface = new AdminInterface();
    
    public LoggingInterface() {
        initComponents();
        
        namesurnameLabel.setVisible(false);
        emailLabel2.setVisible(false);
        passwordLabel2.setVisible(false);
        countryLabel.setVisible(false);
        signupButton1.setVisible(false);
        countryComboBox.setVisible(false);
        passwordTextField1.setVisible(false);
        emailTextField1.setVisible(false);
        namesurnameTextField.setVisible(false);
        premiumRadioButton.setVisible(false);
                
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        premiumRadioButton = new javax.swing.JRadioButton();
        passwordTextField = new javax.swing.JPasswordField();
        emailTextField = new javax.swing.JTextField();
        signupButton = new javax.swing.JButton();
        signinButton = new javax.swing.JButton();
        namesurnameTextField = new javax.swing.JTextField();
        emailTextField1 = new javax.swing.JTextField();
        passwordTextField1 = new javax.swing.JTextField();
        countryComboBox = new javax.swing.JComboBox<>();
        signupButton1 = new javax.swing.JButton();
        namesurnameLabel = new javax.swing.JLabel();
        emailLabel2 = new javax.swing.JLabel();
        passwordLabel2 = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1100, 600));
        setPreferredSize(new java.awt.Dimension(1110, 635));
        getContentPane().setLayout(null);

        jPanel1.setMinimumSize(new java.awt.Dimension(1110, 635));
        jPanel1.setPreferredSize(new java.awt.Dimension(1110, 635));
        jPanel1.setLayout(null);

        premiumRadioButton.setText("Premium");
        jPanel1.add(premiumRadioButton);
        premiumRadioButton.setBounds(130, 460, 90, 23);
        jPanel1.add(passwordTextField);
        passwordTextField.setBounds(70, 120, 210, 30);
        jPanel1.add(emailTextField);
        emailTextField.setBounds(70, 50, 210, 30);

        signupButton.setText("Sign Up");
        signupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupButtonActionPerformed(evt);
            }
        });
        jPanel1.add(signupButton);
        signupButton.setBounds(180, 160, 80, 25);
        signupButton.getAccessibleContext().setAccessibleName("");

        signinButton.setText("Sign In");
        signinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signinButtonActionPerformed(evt);
            }
        });
        jPanel1.add(signinButton);
        signinButton.setBounds(90, 160, 80, 25);
        jPanel1.add(namesurnameTextField);
        namesurnameTextField.setBounds(70, 240, 210, 30);
        jPanel1.add(emailTextField1);
        emailTextField1.setBounds(70, 300, 210, 30);
        jPanel1.add(passwordTextField1);
        passwordTextField1.setBounds(70, 360, 210, 30);

        countryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Turkey", "Germany", "Japan", "USA", "UK" }));
        jPanel1.add(countryComboBox);
        countryComboBox.setBounds(70, 420, 210, 30);

        signupButton1.setText("Sign Up");
        signupButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(signupButton1);
        signupButton1.setBounds(130, 500, 90, 25);

        namesurnameLabel.setForeground(new java.awt.Color(0, 0, 0));
        namesurnameLabel.setText("Name Surname");
        jPanel1.add(namesurnameLabel);
        namesurnameLabel.setBounds(70, 210, 210, 30);

        emailLabel2.setForeground(new java.awt.Color(0, 0, 0));
        emailLabel2.setText("e-Mail");
        jPanel1.add(emailLabel2);
        emailLabel2.setBounds(70, 270, 210, 30);

        passwordLabel2.setForeground(new java.awt.Color(0, 0, 0));
        passwordLabel2.setText("Password");
        jPanel1.add(passwordLabel2);
        passwordLabel2.setBounds(70, 330, 210, 30);

        countryLabel.setForeground(new java.awt.Color(0, 0, 0));
        countryLabel.setText("Country");
        jPanel1.add(countryLabel);
        countryLabel.setBounds(70, 390, 210, 30);

        emailLabel.setForeground(new java.awt.Color(0, 0, 0));
        emailLabel.setText("e-Mail");
        jPanel1.add(emailLabel);
        emailLabel.setBounds(70, 20, 210, 30);

        passwordLabel.setForeground(new java.awt.Color(0, 0, 0));
        passwordLabel.setText("Password");
        jPanel1.add(passwordLabel);
        passwordLabel.setBounds(70, 90, 210, 30);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/panelBG.jpg"))); // NOI18N
        jPanel1.add(background);
        background.setBounds(0, 0, 1100, 600);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1100, 600);

        pack();
    }// </editor-fold>                        

    private void signinButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             

        user = P3MusicDB.returnUser();
        try {
            while (user.next()) {
                 if (emailTextField.getText().equalsIgnoreCase(user.getString("email")) && passwordTextField.getText().equals(user.getString("password"))) {
                    if(user.getString("subscription_type").equalsIgnoreCase("PREMIUM")){
                    System.out.println("PREMIUM User Logged In");
                    isPremium=true;
                    signedID=Integer.valueOf(user.getString("user_ID"));
                    signedName=user.getString("user_name");
                    premiumListingInterface.printFollow();
                    premiumListingInterface.setVisible(true);
                    this.setVisible(false);
                    break;
                    }else{
                    System.out.println("NORMAL User Logged In");
                    isPremium=false;
                    signedID=Integer.valueOf(user.getString("user_ID"));
                    signedName=user.getString("user_name");
                    normalListingInterface.printFollow();
                    normalListingInterface.setVisible(true);
                    this.setVisible(false);
                    break;
                    }
                }
                else if(user.isLast()){
                    System.out.println("Wrong E-Mail or Password.  " + emailTextField.getText() + "  " + passwordTextField.getText());
                    signedID=-1;
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(LoggingInterface.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
    }                                            

    private void signupButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        namesurnameLabel.setVisible(true);
        emailLabel2.setVisible(true);
        passwordLabel2.setVisible(true);
        countryLabel.setVisible(true);
        signupButton1.setVisible(true);
        countryComboBox.setVisible(true);
        passwordTextField1.setVisible(true);
        emailTextField1.setVisible(true);
        namesurnameTextField.setVisible(true);
        premiumRadioButton.setVisible(true);
        signupButton.setVisible(false);
        signinButton.setLocation(135, 160);
    }                                            

    private void signupButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        String paymentInfo;
        if(premiumRadioButton.getFocusTraversalKeysEnabled()){
            premiumListingInterface.printFollow();
            paymentInfo="PAID";
        }else{
        normalListingInterface.printFollow();
        paymentInfo="NOT PAID";
        }
        insertInfo = "INSERT INTO user(user_ID,user_name,email,password,subscription_type,country,payment_info) VALUES ('"+asciiConverter(namesurnameTextField.getText())+"','"+namesurnameTextField.getText()+"','"+emailTextField1.getText()+"','"+passwordTextField1.getText()+"','"+subType+"','"+countryComboBox.getSelectedItem().toString()+"','"+paymentInfo+"');";
        calculateInfo(insertInfo, evt);
    }                                             
    public static int asciiConverter(String name){
    int toplam =0,a=0;
    name= name.replaceAll("\\s+","");
    for(int i = 0;i<name.length();i++){
    a=name.charAt(i);
    toplam+=a;
    }
    return toplam;
    }
    
    public int getSignedID() {
        return signedID;
    }

    public void setSignedID(int signedID) {
        LoggingInterface.signedID = signedID;
    }
    public void calculateInfo(String getInsertInfo, java.awt.event.ActionEvent evt) {

            try {
                P3MusicDB.returnUser().getStatement().executeUpdate(getInsertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
    
}
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoggingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoggingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoggingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoggingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoggingInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel background;
    private javax.swing.JComboBox<String> countryComboBox;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel emailLabel2;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JTextField emailTextField1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel namesurnameLabel;
    private javax.swing.JTextField namesurnameTextField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel passwordLabel2;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JTextField passwordTextField1;
    private javax.swing.JRadioButton premiumRadioButton;
    private javax.swing.JButton signinButton;
    private javax.swing.JButton signupButton;
    private javax.swing.JButton signupButton1;
    // End of variables declaration                   
}

NormalListingInterface -------------------------------------------------------------------------
package p3musicdb;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class NormalListingInterface extends javax.swing.JFrame {
    static ResultSet artist = null;
    static ResultSet songs = null;
    static ResultSet user = null;
    static ResultSet playlist = null;
    static ResultSet follower = null;
    static ResultSet album = null;
    Object[] artistRows = new Object[3];
    Object[] songsRows = new Object[8];
    String[] userRows = new String[6];
    Object[] playlistRows = new Object[4];
    Object[] followerRows = new Object[2];
    Object[] albumRows = new Object[2];
    String insertInfo;
    boolean followCheck=false;
    ArrayList<String> headsets;
    UserPageInterface userPageInterface =new UserPageInterface();

    DefaultTableModel model = new DefaultTableModel(10, 8);
    DefaultTableModel modelFollow = new DefaultTableModel(10, 2);
    int control;
    int i=0,check=0;
    int chosenID ;
    boolean isQuery=false;
    public NormalListingInterface() {
        initComponents();
        printFollow();
        gotopageButton.setEnabled(false);
        listalbumsButton.setEnabled(false);
        addtomylistButton.setEnabled(false);
        followButton.setEnabled(false);
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        followTable = new javax.swing.JTable();
        listalbumsButton = new javax.swing.JButton();
        gotopageButton = new javax.swing.JButton();
        myprofileButton = new javax.swing.JButton();
        songsButton = new javax.swing.JButton();
        userButton = new javax.swing.JButton();
        addtomylistButton = new javax.swing.JButton();
        followButton = new javax.swing.JButton();
        artistButton = new javax.swing.JButton();
        toptensButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1110, 635));
        setSize(new java.awt.Dimension(1100, 600));
        getContentPane().setLayout(null);

        jPanel1.setMinimumSize(new java.awt.Dimension(1110, 635));
        jPanel1.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(40, 40, 660, 320);

        followTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane2.setViewportView(followTable);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(810, 100, 200, 260);

        listalbumsButton.setText("List Albums");
        listalbumsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listalbumsButtonActionPerformed(evt);
            }
        });
        jPanel1.add(listalbumsButton);
        listalbumsButton.setBounds(340, 450, 110, 40);

        gotopageButton.setText("Go To Page");
        gotopageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotopageButtonActionPerformed(evt);
            }
        });
        jPanel1.add(gotopageButton);
        gotopageButton.setBounds(480, 420, 110, 40);

        myprofileButton.setText("My Profile");
        myprofileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myprofileButtonActionPerformed(evt);
            }
        });
        jPanel1.add(myprofileButton);
        myprofileButton.setBounds(980, 530, 90, 40);

        songsButton.setText("List the Songs");
        songsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songsButtonActionPerformed(evt);
            }
        });
        jPanel1.add(songsButton);
        songsButton.setBounds(180, 390, 130, 40);

        userButton.setText("List the User");
        userButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userButtonActionPerformed(evt);
            }
        });
        jPanel1.add(userButton);
        userButton.setBounds(340, 390, 110, 40);

        addtomylistButton.setText("Add to My List");
        addtomylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtomylistButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addtomylistButton);
        addtomylistButton.setBounds(40, 450, 110, 40);

        followButton.setText("Follow/Unfollow");
        followButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followButtonActionPerformed(evt);
            }
        });
        jPanel1.add(followButton);
        followButton.setBounds(180, 450, 130, 40);

        artistButton.setText("List the Artist");
        artistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artistButtonActionPerformed(evt);
            }
        });
        jPanel1.add(artistButton);
        artistButton.setBounds(40, 390, 110, 40);

        toptensButton.setText("Top 10's");
        toptensButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toptensButtonActionPerformed(evt);
            }
        });
        jPanel1.add(toptensButton);
        toptensButton.setBounds(190, 510, 110, 40);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/panelBG.jpg"))); // NOI18N
        jPanel1.add(background);
        background.setBounds(0, 0, 1100, 600);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1100, 600);

        pack();
    }// </editor-fold>                        

    private void gotopageButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if(i==0){
            isQuery=true;
            chosenID = Integer.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString());
            insertInfo ="SELECT Distinct playlist_name FROM proje_3.playlist";
            isQuery=false;
            model.setColumnCount(1);

            playlistperform(insertInfo);
            i++;

        }else if(i==1){

            int[] nums = jTable1.getSelectedRows(); model.setColumnCount(8);
            for (int i = 0; i < nums.length; i++) {
               
                String cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
                System.out.println(nums[i] + " ------- " + cell);
                if (cell.equalsIgnoreCase("Pop")) {
                    insertInfo = "SELECT * FROM proje_3.songs WHERE song_ID IN (SELECT song_ID FROM proje_3.playlist where user_ID = "+ chosenID +" and playlist_name LIKE 'Pop')";
                } else if (cell.equalsIgnoreCase("Jazz")) {
                    insertInfo = "SELECT * FROM proje_3.songs where song_ID IN (SELECT song_ID FROM proje_3.playlist where user_ID="+ chosenID +" and playlist_name LIKE 'Jazz')";
                } else if (cell.equalsIgnoreCase("Classic")) {
                    insertInfo = "SELECT * FROM proje_3.songs where song_ID IN (SELECT song_ID FROM proje_3.playlist where user_ID="+ chosenID +" and playlist_name LIKE 'Classic')";
                }
                
                isQuery=true;
                songsButtonActionPerformed(evt);
                isQuery=false;

            }
            i=0;
        }
    }                                              

    private void songsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        followButton.setEnabled(false);
        gotopageButton.setEnabled(false);
        listalbumsButton.setEnabled(false);
        addtomylistButton.setEnabled(true);
        model.setColumnCount(8);
        i=0;
        if(isQuery){
            songs = P3MusicDB.returnQuarryArtist(insertInfo);
        }else{
            songs = P3MusicDB.returnSongs();
        }
        model.setRowCount(0);
        print(songs,2);
        jTable1.setModel(model);
    }                                           

    private void userButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        gotopageButton.setEnabled(true);
        listalbumsButton.setEnabled(false);
        addtomylistButton.setEnabled(false);
        followButton.setEnabled(true);
        i=0;
        model.setColumnCount(5);
        if(isQuery){
            user = P3MusicDB.returnQuarryUser(insertInfo);
        }else{
            if(adminGet.isAdmin){
                user = P3MusicDB.returnUser();
            }else{
                insertInfo = "SELECT * FROM user WHERE subscription_type LIKE 'PREMIUM'";
                user = P3MusicDB.returnQuarryUser(insertInfo);}
        }
        model.setRowCount(0);
        print(user,3);
        jTable1.setModel(model);
    }                                          


    private void addtomylistButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        int[] nums = jTable1.getSelectedRows();
        for (int i = 0; i < nums.length; i++) {
        String cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
        String cell2 = jTable1.getModel().getValueAt(nums[i], 5).toString();
        check=1;
        insertInfo = "INSERT INTO playlist(user_ID,song_ID,playlist_name) VALUES('"+(p3musicdb.LoggingInterface.signedID)+"','"+Integer.valueOf(cell)+"','"+cell2+"')";
        
        try {
                P3MusicDB.returnUser().getStatement().executeUpdate(insertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println("song added to your list");
    }                                                 

    private void followButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        String cell=null;
        int[] nums = jTable1.getSelectedRows();
        String q = "SELECT Distinct follows_ID From follower where follows_ID IN(select Distinct follows_ID from follower where follower_ID ="+p3musicdb.LoggingInterface.signedID+")";
        follower = P3MusicDB.returnQuarryFollower(q);
           for (int i = 0; i < nums.length; i++){
            try {
                while(follower.next()){
                    cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
                    if(cell.equalsIgnoreCase(follower.getString("follows_ID")))
                    {
                        followCheck=true;
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
               
        }
           
        if(followCheck==false){

        for (int i = 0; i < nums.length; i++) {
        cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
        check=1;
        insertInfo = "INSERT INTO follower(follower_ID,follows_ID) VALUES("+(p3musicdb.LoggingInterface.signedID)+",'"+Integer.valueOf(cell)+"')";
        
        try {
                P3MusicDB.returnUser().getStatement().executeUpdate(insertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println("person added to your FollowList");   
        }else if(followCheck==true){
        for (int i = 0; i < nums.length; i++) {
        cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
        check=1;
        insertInfo =  "DELETE FROM follower where follower_ID ="+(p3musicdb.LoggingInterface.signedID)+" and follows_ID = "+Integer.valueOf(cell);
        try {
                P3MusicDB.returnUser().getStatement().execute(insertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }
            System.out.println("person removed from your FollowList");
        }
        followCheck=false;
        printFollow();
    }                                            

    private void artistButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        followButton.setEnabled(false);
        gotopageButton.setEnabled(false);
        listalbumsButton.setEnabled(true);
        addtomylistButton.setEnabled(false);
        model.setColumnCount(3);
        i=0;
        if(isQuery){
            artist = P3MusicDB.returnQuarryArtist(insertInfo);
        }else{
            artist = P3MusicDB.returnArtist();
        }
        model.setRowCount(0);
        
        print(artist,1);
        jTable1.setModel(model);
    }                                            

    private void myprofileButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        userPageInterface.setVisible(true);
        userPageInterface.printPop();
        userPageInterface.printJazz();
        userPageInterface.printClassic();
        this.setVisible(false);
    }                                               

    private void toptensButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        ListingTopTens listingTopTens = new ListingTopTens();
        listingTopTens.setVisible(true);
        this.setVisible(false);
    }                                             

    private void listalbumsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
         if(i==0){
            isQuery=true;
            chosenID = Integer.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString());
            insertInfo ="SELECT Distinct album_type FROM album";
            model.setColumnCount(1);
            album = P3MusicDB.returnQuarryAlbum(insertInfo);
            model.setRowCount(0);

        try {
            while (album.next()) {
                albumRows[0] = album.getString("album_type");
                model.addRow(albumRows);
            }
                 jTable1.setModel(model);
                headsets=getHeaders(album);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));}
        } catch (SQLException ex) {
            Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
            isQuery=false;
            i++;

        }else if(i==1){

            int[] nums = jTable1.getSelectedRows();
            model.setColumnCount(2);
            for (int i = 0; i < nums.length; i++) {
                String cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
                System.out.println(nums[i] + " ------- " + cell);
                if (cell.equalsIgnoreCase("Pop")) {
                    insertInfo = "select artist,album_name from album where artist IN(select artist_name from artist where artist_ID = "+ chosenID +" and album_type LIKE 'Pop')";
                } else if (cell.equalsIgnoreCase("Jazz")) {
                    insertInfo = "select artist,album_name from album where artist IN(select artist_name from artist where artist_ID = "+ chosenID +" and album_type LIKE 'Jazz')";
                } else if (cell.equalsIgnoreCase("Classic")) {
                    insertInfo = "select artist,album_name from album where artist IN(select artist_name from artist where artist_ID = "+ chosenID +" and album_type LIKE 'Classic')";
                }
                isQuery=true;
                if(isQuery){
                album = P3MusicDB.returnQuarryAlbum(insertInfo);
                }else{
                album = P3MusicDB.returnAlbum();
                }
                model.setRowCount(0);
                print(album,6);
                jTable1.setModel(model);
                isQuery=false;
                listalbumsButton.setEnabled(false);
            }
            i=0;
        }
        
            
        
            
    }                                                
    public void playlistperform(String q){
        
        playlist = P3MusicDB.returnQuarryPlaylist(q);
        model.setRowCount(0);

        try {
            while (playlist.next()) {
                if(i==0){
                playlistRows[0] = playlist.getString("playlist_name");}
                else if(i==1){
                playlistRows[0] = playlist.getString("song_name");
                }
                model.addRow(playlistRows);
            }
            
            headsets=getHeaders(playlist);
            for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
        } catch (SQLException ex) {
            Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void printFollow(){
        insertInfo="select user_name, country from user where user_ID IN(select follows_ID from follower where follower_ID="+LoggingInterface.signedID+")";
        follower = P3MusicDB.returnQuarryUser(insertInfo);
        modelFollow.setRowCount(0);
        try {
            while (follower.next()) {
                followerRows[0] = follower.getString("user_name");
                followerRows[1] = follower.getString("country");
                modelFollow.addRow(followerRows);
                
            }
            
                
        } catch (SQLException ex) {
            Logger.getLogger(UserPageInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
            
                followTable.setModel(modelFollow);
                headsets=getHeaders(follower);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(followTable,j,headsets.get(j));
            }
}
    public void print(ResultSet rs,int table){
        switch (table) {
            case 1:
                try {
                    while (rs.next()) {
                        artistRows[0] = rs.getString("artist_ID");
                        artistRows[1] = rs.getString("artist_name");
                        artistRows[2] = rs.getString("artist_country");
                        model.addRow(artistRows);
                    }
                     jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
            case 2:
                try {
                    while (rs.next()) {
                        songsRows[0] = rs.getString("song_ID");
                        songsRows[1] = rs.getString("song_name");
                        songsRows[2] = rs.getString("date");
                        songsRows[3] = rs.getString("artist");
                        songsRows[4] = rs.getString("album");
                        songsRows[5] = rs.getString("type");
                        songsRows[6] = rs.getString("views");
                        songsRows[7] = rs.getString("duration");
                        model.addRow(songsRows);
                    }
                jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
            case 3:
                try {
                    while (rs.next()) {
                        userRows[0] = rs.getString("user_ID");
                        userRows[1] = rs.getString("user_name");
                        userRows[2] = rs.getString("email");
                        userRows[3] = rs.getString("subscription_type");
                        userRows[4] = rs.getString("country");
                        model.addRow(userRows);
                    }
                     jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size()-2; j++) {
                    ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
            case 4:
                try {
                    while (rs.next()) {
                        if(i==0){
                            playlistRows[0] = rs.getString("playlist_name");}
                        else if(i==1){
                            playlistRows[0] = rs.getString("song_name");
                        }
                        model.addRow(playlistRows);
                    }
                     jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
            case 5:
                try {
                    while (rs.next()) {
                            followerRows[0] = rs.getString("follower_ID");
                            followerRows[1] = rs.getString("follows_ID");
                        model.addRow(followerRows);
                    }
                     jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
                case 6:
                try {
                    while (rs.next()) {
                            albumRows[0] = rs.getString("artist");
                            albumRows[1] = rs.getString("album_name");
                        model.addRow(albumRows);
                    }
                     jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
            default:
                break;
        }
               
    }
 public void ChangeName(JTable table, int col_index, String col_name){
     table.getColumnModel().getColumn(col_index).setHeaderValue(col_name);
  }
 public ArrayList getHeaders(ResultSet rs){
     ArrayList<String> headers = new ArrayList<String>();
      ResultSetMetaData rsmd;
        try {
            rsmd = rs.getMetaData();
            for (int j = 0; j < rsmd.getColumnCount(); j++) {
                headers.add(j, rsmd.getColumnName(j+1));
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
      
     return headers;
 }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NormalListingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NormalListingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NormalListingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NormalListingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NormalListingInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton addtomylistButton;
    private javax.swing.JButton artistButton;
    private javax.swing.JLabel background;
    private javax.swing.JButton followButton;
    private javax.swing.JTable followTable;
    private javax.swing.JButton gotopageButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton listalbumsButton;
    private javax.swing.JButton myprofileButton;
    private javax.swing.JButton songsButton;
    private javax.swing.JButton toptensButton;
    private javax.swing.JButton userButton;
    // End of variables declaration                   
}

PremiumListingIterface -------------------------------------------------------------------------------------------------------
package p3musicdb;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class PremiumListingInterface extends javax.swing.JFrame {
    
    static ResultSet artist = null;
    static ResultSet songs = null;
    static ResultSet user = null;
    static ResultSet playlist = null;
    static ResultSet follower = null;
    static ResultSet album = null;
    Object[] artistRows = new Object[3];
    Object[] songsRows = new Object[8];
    String[] userRows = new String[6];
    Object[] playlistRows = new Object[4];
    Object[] followerRows = new Object[2];
    Object[] albumRows = new Object[2];
    String insertInfo;
    boolean followCheck=false;
    ArrayList<String> headsets;
    UserPageInterface userPageInterface =new UserPageInterface();

    DefaultTableModel model = new DefaultTableModel(10, 8);
    DefaultTableModel modelFollow = new DefaultTableModel(10, 2);
    int control;
    int i=0,check=0;
    int chosenID ;
    boolean isQuery=false;
    public PremiumListingInterface() {
        initComponents();
        printFollow();
        gotopageButton.setEnabled(false);
        listalbumsButton.setEnabled(false);
        addtomylistButton.setEnabled(false);
        followButton.setEnabled(false);
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        followTable = new javax.swing.JTable();
        listalbumsButton = new javax.swing.JButton();
        gotopageButton = new javax.swing.JButton();
        songsButton = new javax.swing.JButton();
        userButton = new javax.swing.JButton();
        addtomylistButton = new javax.swing.JButton();
        followButton = new javax.swing.JButton();
        artistButton = new javax.swing.JButton();
        myprofileButton = new javax.swing.JButton();
        toptensButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1110, 635));
        getContentPane().setLayout(null);

        jPanel1.setMinimumSize(new java.awt.Dimension(1110, 635));
        jPanel1.setPreferredSize(new java.awt.Dimension(1110, 635));
        jPanel1.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(40, 40, 660, 320);

        followTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane2.setViewportView(followTable);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(810, 100, 200, 260);

        listalbumsButton.setText("List Albums");
        listalbumsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listalbumsButtonActionPerformed(evt);
            }
        });
        jPanel1.add(listalbumsButton);
        listalbumsButton.setBounds(340, 450, 110, 40);

        gotopageButton.setText("Go To Page");
        gotopageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotopageButtonActionPerformed(evt);
            }
        });
        jPanel1.add(gotopageButton);
        gotopageButton.setBounds(480, 420, 110, 40);

        songsButton.setText("List the Songs");
        songsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songsButtonActionPerformed(evt);
            }
        });
        jPanel1.add(songsButton);
        songsButton.setBounds(180, 390, 130, 40);

        userButton.setText("List the User");
        userButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userButtonActionPerformed(evt);
            }
        });
        jPanel1.add(userButton);
        userButton.setBounds(340, 390, 110, 40);

        addtomylistButton.setText("Add to My List");
        addtomylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtomylistButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addtomylistButton);
        addtomylistButton.setBounds(40, 450, 110, 40);

        followButton.setText("Follow/Unfollow");
        followButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followButtonActionPerformed(evt);
            }
        });
        jPanel1.add(followButton);
        followButton.setBounds(180, 450, 130, 40);

        artistButton.setText("List the Artist");
        artistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artistButtonActionPerformed(evt);
            }
        });
        jPanel1.add(artistButton);
        artistButton.setBounds(40, 390, 110, 40);

        myprofileButton.setText("My Profile");
        myprofileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myprofileButtonActionPerformed(evt);
            }
        });
        jPanel1.add(myprofileButton);
        myprofileButton.setBounds(960, 530, 110, 40);

        toptensButton.setText("Top 10's");
        toptensButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toptensButtonActionPerformed(evt);
            }
        });
        jPanel1.add(toptensButton);
        toptensButton.setBounds(190, 510, 110, 40);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/panelBG.jpg"))); // NOI18N
        jPanel1.add(background);
        background.setBounds(0, 0, 1100, 600);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1110, 635);

        pack();
    }// </editor-fold>                        

    private void gotopageButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               

        if(i==0){
            isQuery=true;
            chosenID = Integer.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString());
            insertInfo ="SELECT Distinct playlist_name FROM proje_3.playlist";
            isQuery=false;
            model.setColumnCount(1);

            playlistperform(insertInfo);
            i++;

        }else if(i==1){

            int[] nums = jTable1.getSelectedRows(); model.setColumnCount(8);
            for (int i = 0; i < nums.length; i++) {
               
                String cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
                System.out.println(nums[i] + " ------- " + cell);
                if (cell.equalsIgnoreCase("Pop")) {
                    insertInfo = "SELECT * FROM proje_3.songs WHERE song_ID IN (SELECT song_ID FROM proje_3.playlist where user_ID = "+ chosenID +" and playlist_name LIKE 'Pop')";
                } else if (cell.equalsIgnoreCase("Jazz")) {
                    insertInfo = "SELECT * FROM proje_3.songs where song_ID IN (SELECT song_ID FROM proje_3.playlist where user_ID="+ chosenID +" and playlist_name LIKE 'Jazz')";
                } else if (cell.equalsIgnoreCase("Classic")) {
                    insertInfo = "SELECT * FROM proje_3.songs where song_ID IN (SELECT song_ID FROM proje_3.playlist where user_ID="+ chosenID +" and playlist_name LIKE 'Classic')";
                }
                
                isQuery=true;
                songsButtonActionPerformed(evt);
                isQuery=false;

            }
            i=0;
        }
    }                                              

    private void songsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        followButton.setEnabled(false);
        gotopageButton.setEnabled(false);
        listalbumsButton.setEnabled(false);
        addtomylistButton.setEnabled(true);
        model.setColumnCount(8);
        i=0;
        if(isQuery){
            songs = P3MusicDB.returnQuarryArtist(insertInfo);
        }else{
            songs = P3MusicDB.returnSongs();
        }
        model.setRowCount(0);
        print(songs,2);
        jTable1.setModel(model);
    }                                           

    private void userButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        gotopageButton.setEnabled(true);
        listalbumsButton.setEnabled(false);
        addtomylistButton.setEnabled(false);
        followButton.setEnabled(true);
        i=0;
        model.setColumnCount(5);
        if(isQuery){
            user = P3MusicDB.returnQuarryUser(insertInfo);
        }else{
            if(adminGet.isAdmin){
                user = P3MusicDB.returnUser();
            }else{
                insertInfo = "SELECT * FROM user WHERE subscription_type LIKE 'PREMIUM'";
                user = P3MusicDB.returnQuarryUser(insertInfo);}
        }
        model.setRowCount(0);
        print(user,3);
        jTable1.setModel(model);
    }                                          

    private void addtomylistButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        int[] nums = jTable1.getSelectedRows();
        for (int i = 0; i < nums.length; i++) {
        String cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
        String cell2 = jTable1.getModel().getValueAt(nums[i], 5).toString();
        check=1;
        insertInfo = "INSERT INTO playlist(user_ID,song_ID,playlist_name) VALUES('"+(p3musicdb.LoggingInterface.signedID)+"','"+Integer.valueOf(cell)+"','"+cell2+"')";
        
        try {
                P3MusicDB.returnUser().getStatement().executeUpdate(insertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println("song added to your list");
    }                                                 

    private void followButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
String cell=null;
        int[] nums = jTable1.getSelectedRows();
        String q = "SELECT Distinct follows_ID From follower where follows_ID IN(select Distinct follows_ID from follower where follower_ID ="+p3musicdb.LoggingInterface.signedID+")";
        follower = P3MusicDB.returnQuarryFollower(q);
           for (int i = 0; i < nums.length; i++){
            try {
                while(follower.next()){
                    cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
                    if(cell.equalsIgnoreCase(follower.getString("follows_ID")))
                    {
                        followCheck=true;
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
               
        }
           
        if(followCheck==false){

        for (int i = 0; i < nums.length; i++) {
        cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
        check=1;
        insertInfo = "INSERT INTO follower(follower_ID,follows_ID) VALUES("+(p3musicdb.LoggingInterface.signedID)+",'"+Integer.valueOf(cell)+"')";
        
        try {
                P3MusicDB.returnUser().getStatement().executeUpdate(insertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println("person added to your FollowList");   
        }else if(followCheck==true){
        for (int i = 0; i < nums.length; i++) {
        cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
        check=1;
        insertInfo =  "DELETE FROM follower where follower_ID ="+(p3musicdb.LoggingInterface.signedID)+" and follows_ID = "+Integer.valueOf(cell);
        try {
                P3MusicDB.returnUser().getStatement().execute(insertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }
            System.out.println("person removed from your FollowList");
        }
        followCheck=false;
        printFollow();
    }                                            

    private void artistButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        followButton.setEnabled(false);
        gotopageButton.setEnabled(false);
        listalbumsButton.setEnabled(true);
        addtomylistButton.setEnabled(false);
        model.setColumnCount(3);
        i=0;
        if(isQuery){
            artist = P3MusicDB.returnQuarryArtist(insertInfo);
        }else{
            artist = P3MusicDB.returnArtist();
        }
        model.setRowCount(0);
        
        print(artist,1);
        jTable1.setModel(model);
    }                                            
public void printFollow(){

        insertInfo="select user_name, country from user where user_ID IN(select follows_ID from follower where follower_ID="+LoggingInterface.signedID+")";
        follower = P3MusicDB.returnQuarryUser(insertInfo);
        modelFollow.setRowCount(0);
        try {
            while (follower.next()) {
                followerRows[0] = follower.getString("user_name");
                followerRows[1] = follower.getString("country");
                modelFollow.addRow(followerRows);
                
            }
            
                
        } catch (SQLException ex) {
            Logger.getLogger(UserPageInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
            
                followTable.setModel(modelFollow);
                headsets=getHeaders(follower);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(followTable,j,headsets.get(j));
            }
}
    private void myprofileButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        userPageInterface.setVisible(true);
        userPageInterface.printPop();
        userPageInterface.printJazz();
        userPageInterface.printClassic();
        this.setVisible(false);
    }                                               

    private void toptensButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        ListingTopTens listingTopTens = new ListingTopTens();
        listingTopTens.setVisible(true);
        this.setVisible(false);
    }                                             

    private void listalbumsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
         if(i==0){
            
            isQuery=true;
            chosenID = Integer.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString());
            insertInfo ="SELECT Distinct album_type FROM album";
            model.setColumnCount(1);
            album = P3MusicDB.returnQuarryAlbum(insertInfo);
            model.setRowCount(0);

        try {
            while (album.next()) {
                albumRows[0] = album.getString("album_type");
                model.addRow(albumRows);}
            jTable1.setModel(model);
                headsets=getHeaders(album);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));}
        } catch (SQLException ex) {
            Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
            isQuery=false;
            i++;

        }else if(i==1){

            int[] nums = jTable1.getSelectedRows();
            model.setColumnCount(2);
            for (int i = 0; i < nums.length; i++) {
                String cell = jTable1.getModel().getValueAt(nums[i], 0).toString();
                System.out.println(nums[i] + " ------- " + cell);
                if (cell.equalsIgnoreCase("Pop")) {
                    insertInfo = "select artist,album_name from album where artist IN(select distinct artist_name from artist where artist_ID = "+ chosenID +" and album_type LIKE 'Pop')";
                } else if (cell.equalsIgnoreCase("Jazz")) {
                    insertInfo = "select artist,album_name from album where artist IN(select distinct artist_name from artist where artist_ID = "+ chosenID +" and album_type LIKE 'Jazz')";
                } else if (cell.equalsIgnoreCase("Classic")) {
                    insertInfo = "select artist,album_name from album where artist IN(select distinct artist_name from artist where artist_ID = "+ chosenID +" and album_type LIKE 'Classic')";
                }
                isQuery=true;
                if(isQuery){
                album = P3MusicDB.returnQuarryAlbum(insertInfo);
                }else{
                album = P3MusicDB.returnAlbum();
                }
                model.setRowCount(0);
                print(album,6);
                jTable1.setModel(model);
                isQuery=false;
                listalbumsButton.setEnabled(false);
            }
            i=0;
        }

    }                                                

       public void playlistperform(String q){
        
        playlist = P3MusicDB.returnQuarryPlaylist(q);
        model.setRowCount(0);

        try {
            while (playlist.next()) {
                if(i==0){
                playlistRows[0] = playlist.getString("playlist_name");}
                else if(i==1){
                playlistRows[0] = playlist.getString("song_name");
                }
                model.addRow(playlistRows);
            }
            
            headsets=getHeaders(playlist);
            for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
        } catch (SQLException ex) {
            Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void print(ResultSet rs,int table){
        switch (table) {
            case 1:
                try {
                    while (rs.next()) {
                        artistRows[0] = rs.getString("artist_ID");
                        artistRows[1] = rs.getString("artist_name");
                        artistRows[2] = rs.getString("artist_country");
                        model.addRow(artistRows);
                    }
                     jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
            case 2:
                try {
                    while (rs.next()) {
                        songsRows[0] = rs.getString("song_ID");
                        songsRows[1] = rs.getString("song_name");
                        songsRows[2] = rs.getString("date");
                        songsRows[3] = rs.getString("artist");
                        songsRows[4] = rs.getString("album");
                        songsRows[5] = rs.getString("type");
                        songsRows[6] = rs.getString("views");
                        songsRows[7] = rs.getString("duration");
                        model.addRow(songsRows);
                    }
                jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
            case 3:
                try {
                    while (rs.next()) {
                        userRows[0] = rs.getString("user_ID");
                        userRows[1] = rs.getString("user_name");
                        userRows[2] = rs.getString("email");
                        userRows[3] = rs.getString("subscription_type");
                        userRows[4] = rs.getString("country");
                        model.addRow(userRows);
                    }
                     jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size()-2; j++) {
                    ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
            case 4:
                try {
                    while (rs.next()) {
                        if(i==0){
                            playlistRows[0] = rs.getString("playlist_name");}
                        else if(i==1){
                            playlistRows[0] = rs.getString("song_name");
                        }
                        model.addRow(playlistRows);
                    }
                     jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
            case 5:
                try {
                    while (rs.next()) {
                            followerRows[0] = rs.getString("follower_ID");
                            followerRows[1] = rs.getString("follows_ID");
                        model.addRow(followerRows);
                    }
                     jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
                case 6:
                try {
                    while (rs.next()) {
                            albumRows[0] = rs.getString("artist");
                            albumRows[1] = rs.getString("album_name");
                        model.addRow(albumRows);
                    }
                     jTable1.setModel(model);
                headsets=getHeaders(rs);
                for (int j = 0; j < headsets.size(); j++) {
                ChangeName(jTable1,j,headsets.get(j));
            }
                } catch (SQLException ex) {
                    Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
                }   break;
            default:
                break;
        }
               
    }
     public void ChangeName(JTable table, int col_index, String col_name){
     table.getColumnModel().getColumn(col_index).setHeaderValue(col_name);
  }
 public ArrayList getHeaders(ResultSet rs){
     ArrayList<String> headers = new ArrayList<String>();
      ResultSetMetaData rsmd;
        try {
            rsmd = rs.getMetaData();
            for (int j = 0; j < rsmd.getColumnCount(); j++) {
                headers.add(j, rsmd.getColumnName(j+1));
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
      
     return headers;
 }
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PremiumListingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PremiumListingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PremiumListingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PremiumListingInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PremiumListingInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton addtomylistButton;
    private javax.swing.JButton artistButton;
    private javax.swing.JLabel background;
    private javax.swing.JButton followButton;
    private javax.swing.JTable followTable;
    private javax.swing.JButton gotopageButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton listalbumsButton;
    private javax.swing.JButton myprofileButton;
    private javax.swing.JButton songsButton;
    private javax.swing.JButton toptensButton;
    private javax.swing.JButton userButton;
    // End of variables declaration                   
}

AdminGet -------------------------------------------------------------------------------------------------------
package p3musicdb;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
public class adminGet extends javax.swing.JFrame {
ResultSet user = null;
static boolean isAdmin =false;
AdminInterface adminInterface = new AdminInterface();
    public adminGet() {
        initComponents();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(350, 150));
        setMinimumSize(new java.awt.Dimension(400, 300));
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);
        jPanel1.add(jPasswordField1);
        jPasswordField1.setBounds(100, 120, 200, 30);

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(170, 200, 60, 25);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel2.setText("Enter Your Admin Password");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(130, 80, 160, 30);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel1.setText("Program will be closed if the password is wrong...");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(60, 150, 290, 30);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/admingetBG.jpg"))); // NOI18N
        jPanel1.add(background);
        background.setBounds(0, 0, 400, 300);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 400, 300);

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    try {
        String q = "SELECT password FROM user where user_ID-1<0";
        user = P3MusicDB.returnQuarryUser(q);
        while(user.next()){
            
            if(jPasswordField1.getText().equalsIgnoreCase(user.getString("password"))){
                adminInterface.setVisible(true);
                isAdmin=true;
                P3MusicDB.whoAreYou.setVisible(false);
                this.setVisible(false);
                
            }else{
                System.exit(0);
                
            }
                }
    } catch (SQLException ex) {
        Logger.getLogger(adminGet.class.getName()).log(Level.SEVERE, null, ex);
    }
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminGet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminGet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminGet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminGet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adminGet().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel background;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    // End of variables declaration                   
}

UserPageInterface ------------------------------------------------------------------------------------------------------------------
package p3musicdb;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

public class UserPageInterface extends javax.swing.JFrame {
static ResultSet songs = null;
static ResultSet songs1 = null;
static ResultSet songs2 = null;
Object[] playlistRows = new Object[3];
DefaultTableModel modelPop = new DefaultTableModel(10, 3);
DefaultTableModel modelJazz = new DefaultTableModel(10, 3);
DefaultTableModel modelClassic = new DefaultTableModel(10, 3);
String insertInfo;
int[] nums;
int check;
    public UserPageInterface() {
        initComponents();
        
    }


    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        popTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jazzTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        classicTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        returnmainpageButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        classiclist = new javax.swing.JLabel();
        poplist = new javax.swing.JLabel();
        jazzlist = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1105, 625));
        setPreferredSize(new java.awt.Dimension(1110, 635));
        getContentPane().setLayout(null);

        jPanel1.setMinimumSize(new java.awt.Dimension(1110, 635));
        jPanel1.setName(""); // NOI18N
        jPanel1.setLayout(null);

        popTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Song", "Artist", "Views"
            }
        ));
        popTable.setMinimumSize(new java.awt.Dimension(300, 64));
        popTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                popTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(popTable);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(20, 170, 330, 260);

        jazzTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Song", "Artist", "Views"
            }
        ));
        jazzTable.setMinimumSize(new java.awt.Dimension(300, 64));
        jazzTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jazzTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jazzTable);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(380, 170, 340, 260);

        classicTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Song", "Artist", "Views"
            }
        ));
        classicTable.setMinimumSize(new java.awt.Dimension(300, 64));
        classicTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classicTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(classicTable);

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(750, 170, 330, 260);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteButton);
        deleteButton.setBounds(480, 480, 130, 40);

        returnmainpageButton.setText("Return Main Page");
        returnmainpageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnmainpageButtonActionPerformed(evt);
            }
        });
        jPanel1.add(returnmainpageButton);
        returnmainpageButton.setBounds(20, 20, 150, 60);

        logoutButton.setText("Log Out");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });
        jPanel1.add(logoutButton);
        logoutButton.setBounds(1010, 520, 72, 60);

        classiclist.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        classiclist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        classiclist.setText("CLASSIC LIST");
        jPanel1.add(classiclist);
        classiclist.setBounds(750, 130, 330, 30);

        poplist.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        poplist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        poplist.setText("POP LIST");
        jPanel1.add(poplist);
        poplist.setBounds(20, 130, 330, 30);

        jazzlist.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jazzlist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jazzlist.setText("JAZZ LIST");
        jPanel1.add(jazzlist);
        jazzlist.setBounds(380, 130, 340, 30);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/panelBG.jpg"))); // NOI18N
        jPanel1.add(background);
        background.setBounds(0, 0, 1100, 600);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1100, 630);

        pack();
    }// </editor-fold>                        

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        String cell=null;
        
    switch (check) {
        case 0:
            for(int i=0;i<nums.length;i++){
            cell = popTable.getModel().getValueAt(nums[i], 0).toString();
             insertInfo = "Delete from playlist where user_ID ="+LoggingInterface.signedID+" and (song_ID IN (select song_ID from songs where song_name LIKE '"+cell+"'))";
             try {
                P3MusicDB.returnPlaylist().getStatement().execute(insertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            printPop();
            break;
        case 1:
            for(int i=0;i<nums.length;i++){
            cell = jazzTable.getModel().getValueAt(nums[i], 0).toString();
             insertInfo = "Delete from playlist where user_ID ="+LoggingInterface.signedID+" and (song_ID IN (select song_ID from songs where song_name LIKE '"+cell+"'))";
             try {
                P3MusicDB.returnPlaylist().getStatement().execute(insertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            printJazz();
            break;
        case 2:
            for(int i=0;i<nums.length;i++){
            cell = classicTable.getModel().getValueAt(nums[i], 0).toString();
             insertInfo = "Delete from playlist where user_ID ="+LoggingInterface.signedID+" and (song_ID IN (select song_ID from songs where song_name LIKE '"+cell+"'))";
             try {
                P3MusicDB.returnPlaylist().getStatement().execute(insertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(NormalListingInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            printClassic();
            break;
        default:
            break;
    }

        
    }                                            

    private void returnmainpageButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        NormalListingInterface normalListingInterface = new NormalListingInterface();
        PremiumListingInterface premiumListingInterface = new PremiumListingInterface();
        if(LoggingInterface.isPremium){
            premiumListingInterface.setVisible(true);
            this.setVisible(false);
        }else{
            normalListingInterface.setVisible(true);
            this.setVisible(false);
        }
    }                                                    

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        WhoAreYou whoAreYou = new WhoAreYou();
        whoAreYou.setVisible(true);
        this.setVisible(false);
    }                                            

    private void popTableMouseClicked(java.awt.event.MouseEvent evt) {                                      
        nums= popTable.getSelectedRows();
        check=0;
    }                                     

    private void jazzTableMouseClicked(java.awt.event.MouseEvent evt) {                                       
        nums=jazzTable.getSelectedRows();
        check=1;
    }                                      

    private void classicTableMouseClicked(java.awt.event.MouseEvent evt) {                                          
        nums=classicTable.getSelectedRows();
        check=2;
    }                                         
public void printPop(){
    insertInfo="select song_name,artist,views from songs where song_ID IN(select song_ID from playlist where user_ID = "+LoggingInterface.signedID+" and (playlist_name LIKE 'Pop'))";
        songs = P3MusicDB.returnQuarrySongs(insertInfo);
        modelPop.setRowCount(0);
        
        try {
            while (songs.next()) {
                playlistRows[0] = songs.getString("song_name");
                playlistRows[1] = songs.getString("artist");
                playlistRows[2] = songs.getString("views");
                modelPop.addRow(playlistRows);
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(UserPageInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        popTable.setModel(modelPop);

}
public void printJazz(){
    insertInfo="select song_name,artist,views from songs where song_ID IN(select song_ID from playlist where user_ID = "+LoggingInterface.signedID+" and (playlist_name LIKE 'Jazz'))";
        songs1 = P3MusicDB.returnQuarrySongs(insertInfo);
        modelJazz.setRowCount(0);

        try {
            while (songs1.next()) {
                playlistRows[0] = songs1.getString("song_name");
                playlistRows[1] = songs1.getString("artist");
                playlistRows[2] = songs1.getString("views");
                modelJazz.addRow(playlistRows);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UserPageInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        jazzTable.setModel(modelJazz);

}
public void printClassic(){
        insertInfo="select song_name,artist,views from songs where song_ID IN(select song_ID from playlist where user_ID = "+LoggingInterface.signedID+" and (playlist_name LIKE 'Classic'))";
        songs2 = P3MusicDB.returnQuarrySongs(insertInfo);
        modelClassic.setRowCount(0);

        try {
            while (songs2.next()) {
                playlistRows[0] = songs2.getString("song_name");
                playlistRows[1] = songs2.getString("artist");
                playlistRows[2] = songs2.getString("views");
                modelClassic.addRow(playlistRows);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UserPageInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        classicTable.setModel(modelClassic);

}
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserPageInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserPageInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserPageInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserPageInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserPageInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel background;
    private javax.swing.JTable classicTable;
    private javax.swing.JLabel classiclist;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jazzTable;
    private javax.swing.JLabel jazzlist;
    private javax.swing.JButton logoutButton;
    private javax.swing.JTable popTable;
    private javax.swing.JLabel poplist;
    private javax.swing.JButton returnmainpageButton;
    // End of variables declaration                   
}

ListingTopTens -----------------------------------------------------------------------------------------------------------------------
package p3musicdb;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class ListingTopTens extends javax.swing.JFrame {
    public ListingTopTens() {
        initComponents();
        bringItOn();
    }
    DefaultTableModel model1 = new DefaultTableModel(10, 4);
    DefaultTableModel model2 = new DefaultTableModel(10, 4);
    DefaultTableModel model3 = new DefaultTableModel(10, 4);
    DefaultTableModel model4 = new DefaultTableModel(10, 4);
    DefaultTableModel model5 = new DefaultTableModel(10, 5);
    TableModel model;
    String insertInfo;
    int i=1;
    int[] nums;
    ResultSet song = null;
    ResultSet rs = null;
    Object[] songsRows = new Object[5];
    String[] cells = new String[2];
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        addSong = new javax.swing.JButton();
        addList = new javax.swing.JButton();
        returnmainpageButton = new javax.swing.JButton();
        countrylistCB = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1290, 755));
        getContentPane().setLayout(null);

        jPanel1.setMinimumSize(new java.awt.Dimension(1290, 755));
        jPanel1.setLayout(null);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jTable5.setMinimumSize(new java.awt.Dimension(400, 330));
        jTable5.setPreferredSize(new java.awt.Dimension(400, 330));
        jTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable5MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable5);
        if (jTable5.getColumnModel().getColumnCount() > 0) {
            jTable5.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jPanel1.add(jScrollPane5);
        jScrollPane5.setBounds(450, 380, 470, 240);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setMinimumSize(new java.awt.Dimension(400, 330));
        jTable1.setPreferredSize(new java.awt.Dimension(400, 330));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(30, 80, 390, 240);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.setMinimumSize(new java.awt.Dimension(380, 330));
        jTable3.setPreferredSize(new java.awt.Dimension(380, 330));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(870, 80, 390, 240);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setMinimumSize(new java.awt.Dimension(380, 330));
        jTable2.setPreferredSize(new java.awt.Dimension(380, 330));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(450, 80, 390, 240);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable4.setMinimumSize(new java.awt.Dimension(380, 330));
        jTable4.setPreferredSize(new java.awt.Dimension(380, 330));
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(40, 380, 390, 240);

        addSong.setText("Add Song");
        addSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongActionPerformed(evt);
            }
        });
        jPanel1.add(addSong);
        addSong.setBounds(990, 360, 90, 40);

        addList.setText("Add List");
        addList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addListActionPerformed(evt);
            }
        });
        jPanel1.add(addList);
        addList.setBounds(1110, 360, 90, 40);

        returnmainpageButton.setText("Return Main Page");
        returnmainpageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnmainpageButtonActionPerformed(evt);
            }
        });
        jPanel1.add(returnmainpageButton);
        returnmainpageButton.setBounds(1110, 630, 130, 50);

        countrylistCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Turkey", "USA", "UK", "Germany", "Japan", "France", "Italy" }));
        countrylistCB.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                countrylistCBPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel1.add(countrylistCB);
        countrylistCB.setBounds(110, 630, 220, 30);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Most Listened Songs");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(450, 340, 470, 40);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Most Listened Songs by Countries");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(30, 340, 390, 40);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Most Listened CLASSIC Songs");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(880, 40, 390, 40);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Most Listened JAZZ Songs");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(450, 40, 390, 40);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Most Listened POP Songs");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(30, 40, 390, 40);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/toptenBG.jpg"))); // NOI18N
        jPanel1.add(background);
        background.setBounds(0, 0, 1280, 720);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1290, 755);

        pack();
    }// </editor-fold>                        

    private void addSongActionPerformed(java.awt.event.ActionEvent evt) {                                        
        
        for (int i = 0; i < nums.length; i++) {
        song= P3MusicDB.returnQuarrySongs("select song_ID, type from songs where song_ID IN(select song_ID from songs where song_name LIKE '"+jTable1.getModel().getValueAt(nums[i], 1).toString()+"')");
        try {
            while (song.next()) {
            cells[0] = song.getString("song_ID");
            cells[1] = song.getString("type");
                System.out.println((p3musicdb.LoggingInterface.signedID)+" "+Integer.valueOf(cells[0])+" "+cells[1]);
            }
            insertInfo = "INSERT INTO playlist(user_ID,song_ID,playlist_name) VALUES('"+(p3musicdb.LoggingInterface.signedID)+"','"+Integer.valueOf(cells[0])+"','"+cells[1]+"')";
            
            try {
                P3MusicDB.returnSongs().getStatement().executeUpdate(insertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(ListingTopTens.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException ex) {
                Logger.getLogger(ListingTopTens.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println("song added to your list");
    }                                       

    private void addListActionPerformed(java.awt.event.ActionEvent evt) {                                        
    for (int j = 0; j < model.getRowCount(); j++) {

        for (int i = 0; i < nums.length; i++) {
        song= P3MusicDB.returnQuarrySongs("select song_ID, type from songs where song_ID IN(select song_ID from songs where song_name LIKE '"+model.getValueAt(j, 1).toString()+"')");
        try {
            while (song.next()) {
            cells[0] = song.getString("song_ID");
            cells[1] = song.getString("type");
                System.out.println((p3musicdb.LoggingInterface.signedID)+" "+Integer.valueOf(cells[0])+" "+cells[1]);
            }
            insertInfo = "INSERT INTO playlist(user_ID,song_ID,playlist_name) VALUES('"+(p3musicdb.LoggingInterface.signedID)+"','"+Integer.valueOf(cells[0])+"','"+cells[1]+"')";
            
            try {
                P3MusicDB.returnSongs().getStatement().executeUpdate(insertInfo);
            } catch (SQLException ex) {
                Logger.getLogger(ListingTopTens.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException ex) {
                Logger.getLogger(ListingTopTens.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println("song added to your list");    }
    }                                       

    private void returnmainpageButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        NormalListingInterface normalListingInterface = new NormalListingInterface();
        PremiumListingInterface premiumListingInterface = new PremiumListingInterface();
        if(LoggingInterface.isPremium){
            premiumListingInterface.setVisible(true);
            this.setVisible(false);
        }else{
            normalListingInterface.setVisible(true);
            this.setVisible(false);
        }
    }                                                    

    private void countrylistCBPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {                                                           
        insertInfo="Select song_name,artist,views from songs where artist IN( select artist_name from artist where artist_country LIKE '"+countrylistCB.getSelectedItem().toString()+"') order by views DESC LIMIT 10;";
        rs= P3MusicDB.returnQuarrySongs(insertInfo);
        model4.setRowCount(0);
        i=1;
        try {
                    while (rs.next()) {
                        songsRows[0] = i;
                        songsRows[1] = rs.getString("song_name");
                        songsRows[2] = rs.getString("artist");
                        songsRows[3] = rs.getString("views");
                        model4.addRow(songsRows);
                        i++;
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
        jTable4.setModel(model4);
    }                                                          

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        nums=jTable1.getSelectedRows();
        model=model1;
    }                                    

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {                                     
        nums=jTable2.getSelectedRows();
        model=model2;
    }                                    

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {                                     
        nums=jTable3.getSelectedRows();
        model=model3;
    }                                    

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {                                     
        nums=jTable4.getSelectedRows();
        model=model4;
    }                                    

    private void jTable5MouseClicked(java.awt.event.MouseEvent evt) {                                     
        nums=jTable5.getSelectedRows();
        model=model5;
    }                                    
    public void bringItOn(){
        insertInfo="Select song_name,artist,views from songs where type LIKE 'Pop' order by views DESC LIMIT 10";
        rs= P3MusicDB.returnQuarrySongs(insertInfo);
        model1.setRowCount(0);
        i=1;
        try {
                    while (rs.next()) {
                        songsRows[0] = i;
                        songsRows[1] = rs.getString("song_name");
                        songsRows[2] = rs.getString("artist");
                        songsRows[3] = rs.getString("views");
                        model1.addRow(songsRows);
                        i++;
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
        jTable1.setModel(model1);
        
        insertInfo="Select song_name,artist,views from songs where type LIKE 'Jazz' order by views DESC LIMIT 10";
        rs= P3MusicDB.returnQuarrySongs(insertInfo);
        model2.setRowCount(0);
        i=1;
        try {
                    while (rs.next()) {
                        songsRows[0] = i;
                        songsRows[1] = rs.getString("song_name");
                        songsRows[2] = rs.getString("artist");
                        songsRows[3] = rs.getString("views");
                        model2.addRow(songsRows);
                        i++;
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
        jTable2.setModel(model2);
        
        insertInfo="Select song_name,artist,views from songs where type LIKE 'Classic' order by views DESC LIMIT 10";
        rs= P3MusicDB.returnQuarrySongs(insertInfo);
        model3.setRowCount(0);
        i=1;
        try {
                    while (rs.next()) {
                        songsRows[0] = i;
                        songsRows[1] = rs.getString("song_name");
                        songsRows[2] = rs.getString("artist");
                        songsRows[3] = rs.getString("views");
                        model3.addRow(songsRows);
                        i++;
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
        jTable3.setModel(model3);
        
        insertInfo="Select song_name,artist,views from songs where artist IN( select artist_name from artist where artist_country LIKE '"+countrylistCB.getSelectedItem().toString()+"') order by views DESC LIMIT 10;";
        rs= P3MusicDB.returnQuarrySongs(insertInfo);
        model4.setRowCount(0);
        i=1;
        try {
                    while (rs.next()) {
                        songsRows[0] = i;
                        songsRows[1] = rs.getString("song_name");
                        songsRows[2] = rs.getString("artist");
                        songsRows[3] = rs.getString("views");
                        model4.addRow(songsRows);
                        i++;
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
        jTable4.setModel(model4);
        
        insertInfo="SELECT song_name,artist,views,artist_country FROM songs,artist where artist_name=artist order by views DESC LIMIT 10";
        rs= P3MusicDB.returnQuarrySongs(insertInfo);
        model5.setRowCount(0);
        i=1;
        try {
                    while (rs.next()) {
                        songsRows[0] = i;
                        songsRows[1] = rs.getString("song_name");
                        songsRows[2] = rs.getString("artist");
                        songsRows[3] = rs.getString("views");
                        songsRows[4] = rs.getString("artist_country");
                        model5.addRow(songsRows);
                        i++;
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PremiumListingInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
        jTable5.setModel(model5);
    }
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListingTopTens.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListingTopTens.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListingTopTens.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListingTopTens.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListingTopTens().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton addList;
    private javax.swing.JButton addSong;
    private javax.swing.JLabel background;
    private javax.swing.JComboBox<String> countrylistCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JButton returnmainpageButton;
    // End of variables declaration                   
}
